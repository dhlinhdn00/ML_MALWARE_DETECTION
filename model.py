from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from catboost import CatBoostClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

def random_forest(X_train, y_train):
    classifier = RandomForestClassifier(n_estimators=50, criterion='entropy', random_state=0)
    classifier.fit(X_train, y_train)
    return classifier

def xgboost(X_train, y_train):
    classifier = XGBClassifier(max_depth=20, learning_rate=0.3, n_estimators=150)
    classifier.fit(X_train, y_train)
    return classifier

def knn(X_train, y_train, n_neighbors=7, metric='minkowski', p=2):
    classifier = KNeighborsClassifier(n_neighbors=n_neighbors, metric=metric, p=p)
    classifier.fit(X_train, y_train)
    return classifier

def lightgbm(X_train, y_train):
    classifier = LGBMClassifier(n_estimators=100, learning_rate=0.1, random_state=0)
    classifier.fit(X_train, y_train)
    return classifier

def catboost(X_train, y_train):
    classifier = CatBoostClassifier(iterations=100, learning_rate=0.1, depth=10, verbose=0, random_state=0)
    classifier.fit(X_train, y_train)
    return classifier

def naive_bayes(X_train, y_train):
    classifier = GaussianNB()
    classifier.fit(X_train, y_train)
    return classifier

def simple_neural_network(input_dim):
    model = Sequential([
        Dense(128, activation='relu', input_shape=(input_dim,)),
        Dropout(0.5),
        Dense(64, activation='relu'),
        Dropout(0.5),
        Dense(1, activation='sigmoid')
    ])
    
    model.compile(optimizer='adam',
                  loss='binary_crossentropy',
                  metrics=['accuracy'])
    return model

