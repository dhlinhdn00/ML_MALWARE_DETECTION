import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk
from tkinter.scrolledtext import ScrolledText
import os

from single_inference import load_model, load_features_from_txt, prepare_single_data
from extract_only_file import extract_infos

FEATURE_COLUMNS = [
    'Machine', 'SizeOfOptionalHeader', 'Characteristics', 'MajorLinkerVersion', 'MinorLinkerVersion',
    'SizeOfCode', 'SizeOfInitializedData', 'SizeOfUninitializedData', 'AddressOfEntryPoint', 'BaseOfCode',
    'BaseOfData', 'ImageBase', 'SectionAlignment', 'FileAlignment', 'MajorOperatingSystemVersion',
    'MinorOperatingSystemVersion', 'MajorImageVersion', 'MinorImageVersion', 'MajorSubsystemVersion',
    'MinorSubsystemVersion', 'SizeOfImage', 'SizeOfHeaders', 'CheckSum', 'Subsystem', 'DllCharacteristics',
    'SizeOfStackReserve', 'SizeOfStackCommit', 'SizeOfHeapReserve', 'SizeOfHeapCommit', 'LoaderFlags',
    'NumberOfRvaAndSizes', 'SectionsNb', 'SectionsMeanEntropy', 'SectionsMinEntropy', 'SectionsMaxEntropy',
    'SectionsMeanRawsize', 'SectionsMinRawsize', 'SectionsMaxRawsize', 'SectionsMeanVirtualsize',
    'SectionsMinVirtualsize', 'SectionsMaxVirtualsize', 'ImportsNbDLL', 'ImportsNb', 'ImportsNbOrdinal',
    'ExportNb', 'ResourcesNb', 'ResourcesMeanEntropy', 'ResourcesMinEntropy', 'ResourcesMaxEntropy',
    'ResourcesMeanSize', 'ResourcesMinSize', 'ResourcesMaxSize', 'LoadConfigurationSize',
    'VersionInformationSize'
]

def extract_info(file_path, output_path):
    try:
        extract_infos(file_path, output_path)
        return True
    except Exception as e:
        print(f"Error extracting info: {e}")
        return False

def run_inference(model_name, file_path):
    model = load_model(model_name)
    if model is None:
        return "Model not loaded"
    
    features = load_features_from_txt(file_path)
    data = prepare_single_data(features, FEATURE_COLUMNS)
    prediction = model.predict(data)
    return "Malware" if prediction == 1 else "Benign"

def select_file():
    file_path = filedialog.askopenfilename(filetypes=[("PE Files", "*.exe")])
    if file_path:
        entry_file_path.delete(0, tk.END)
        entry_file_path.insert(0, file_path)
        display_extracted_info(file_path)

def display_extracted_info(file_path):
    output_path = f'./samples/info_{os.path.basename(file_path)}.txt'
    if extract_info(file_path, output_path):
        with open(output_path, 'r') as file:
            extracted_info.delete(1.0, tk.END)
            extracted_info.insert(tk.END, file.read())

def detect():
    file_path = entry_file_path.get()
    model_name = selected_model.get()
    
    if not file_path or not os.path.exists(file_path):
        messagebox.showerror("Error", "Please select a valid PE file.")
        return
    
    output_path = f'./samples/info_{os.path.basename(file_path)}.txt'
    if not extract_info(file_path, output_path):
        messagebox.showerror("Error", "Failed to extract information from the PE file.")
        return

    result = run_inference(model_name, output_path)
    messagebox.showinfo("Result", f"The file is predicted to be: {result}")

root = tk.Tk()
root.title("Malware Detection")
root.geometry("700x600")

style = ttk.Style()
style.theme_use('clam')

font_label = ('TimeNewRoman', 12)
font_entry = ('TimeNewRoman', 12)
font_button = ('TimeNewRoman', 12, 'bold')
font_text = ('TimeNewRoman', 10)

frame = ttk.Frame(root, padding="10")
frame.pack(fill=tk.BOTH, expand=True)

ttk.Label(frame, text="File Path:", font=font_label).grid(row=0, column=0, sticky=tk.W, pady=5)
entry_file_path = ttk.Entry(frame, width=50, font=font_entry)
entry_file_path.grid(row=0, column=1, padx=5, pady=5)
ttk.Button(frame, text="Chooose file", command=select_file, style='TButton', cursor='hand2', takefocus=False).grid(row=0, column=2, padx=5, pady=5)

ttk.Label(frame, text="Select Model:", font=font_label).grid(row=1, column=0, sticky=tk.W, pady=5)
model_options = ['random_forest', 'xgboost', 'knn', 'naive_bayes', 'lightgbm', 'catboost', 'simple_nn']
selected_model = ttk.Combobox(frame, values=model_options, state='readonly', font=font_entry)
selected_model.current(0)
selected_model.grid(row=1, column=1, columnspan=2, padx=5, pady=5, sticky=tk.W)

ttk.Button(frame, text="Detect", command=detect, style='TButton', cursor='hand2', takefocus=False).grid(row=2, columnspan=3, pady=10)

ttk.Label(frame, text="Extracted Information:", font=font_label).grid(row=3, column=0, columnspan=3, sticky=tk.W, pady=5)
extracted_info = ScrolledText(frame, height=20, width=85, font=font_text)
extracted_info.grid(row=4, column=0, columnspan=3, padx=5, pady=5)

root.mainloop()
